-- Wait for game to fully load
while not game:IsLoaded() do wait() end

-- Services
local PFS = game:GetService("PathfindingService")
local VIM = game:GetService("VirtualInputManager")
local Players = game:GetService("Players")
local player = Players.LocalPlayer

-- UI Setup (Luna)
local Luna = loadstring(game:HttpGet("https://raw.githubusercontent.com/Nebula-Softworks/Luna-Interface-Suite/refs/heads/main/source.lua", true))()
local Window = Luna:CreateWindow({
	Name = "Forsaken Script",
	Subtitle = "Made by Ugly",
	LoadingEnabled = true,
	LoadingTitle = "Forsaken Demo",
	LoadingSubtitle = "Made by Ugly",
	ConfigSettings = {
		RootFolder = nil,
		ConfigFolder = "UglySurvivorBot"
	},
	KeySystem = false
})

local AutomationTab = Window:CreateTab({
	Name = "Automation",
	Icon = "memory",
	ImageSource = "Material",
	ShowTitle = true
})

AutomationTab:CreateSection("Main Control")

-- Global Vars
local _G = getfenv()
_G.autoRun = false
local botThread = nil

local testPath = PFS:CreatePath({
	AgentRadius = 2,
	AgentHeight = 5,
	AgentCanJump = false,
	AgentJumpHeight = 10,
	AgentCanClimb = true,
	AgentMaxSlope = 45
})

local isInGame, currentCharacter
local Spectators = {}

-- In-game check
task.spawn(function()
	while true do
		Spectators = {}
		for _, child in game.Workspace.Players.Spectating:GetChildren() do
			table.insert(Spectators, child.Name)
		end
		isInGame = not table.find(Spectators, player.Name)
		wait(1)
	end
end)

-- Killer detection
local function killerNearby()
	if currentCharacter and currentCharacter:FindFirstChild("HumanoidRootPart") then
		for _, killer in ipairs(workspace.Players.Killers:GetChildren()) do
			if killer:FindFirstChild("HumanoidRootPart") then
				local dist = (killer.HumanoidRootPart.Position - currentCharacter.HumanoidRootPart.Position).Magnitude
				if dist <= 65 then
					print("[ALERT] Killer detected nearby!")
					return true
				end
			end
		end
	end
	return false
end

-- Run away from killer
local function runAway()
	print("[ACTION] Escaping from killer!")
	VIM:SendKeyEvent(true, Enum.KeyCode.LeftShift, false, game)
	for _ = 1, 5 do
		local angle = math.rad(math.random(0, 220))
		local offset = Vector3.new(math.cos(angle), 0, math.sin(angle)) * 250
		testPath:ComputeAsync(currentCharacter.HumanoidRootPart.Position, currentCharacter.HumanoidRootPart.Position + offset)
		if testPath.Status == Enum.PathStatus.Success then
			local waypoints = testPath:GetWaypoints()
			for _, wp in ipairs(waypoints) do
				if not _G.autoRun then return end
				currentCharacter.Humanoid:MoveTo(wp.Position)
				currentCharacter.Humanoid.MoveToFinished:Wait()
				print("[MOVE] Escaping to waypoint:", wp.Position)
				local killerTooClose = false
				for _, killer in ipairs(workspace.Players.Killers:GetChildren()) do
					if killer:FindFirstChild("HumanoidRootPart") then
						local dist = (killer.HumanoidRootPart.Position - currentCharacter.HumanoidRootPart.Position).Magnitude
						if dist < 120 then
							killerTooClose = true
							break
						end
					end
				end
				if not killerTooClose then
					print("[SAFE] Killer escaped.")
					VIM:SendKeyEvent(false, Enum.KeyCode.LeftShift, false, game)
					return
				end
			end
		end
	end
	VIM:SendKeyEvent(false, Enum.KeyCode.LeftShift, false, game)
end

-- Repair Generators
local function repairGenerators()
	for _, gen in ipairs(workspace.Map.Ingame.Map:GetChildren()) do
		if not _G.autoRun then return end
		if gen.Name == "Generator" and gen:FindFirstChild("Progress") and gen.Progress.Value < 100 then
			print("[TASK] Heading to generator:", gen.Name)
			testPath:ComputeAsync(currentCharacter.HumanoidRootPart.Position, gen.Positions.Right.Position)
			if testPath.Status == Enum.PathStatus.Success then
				VIM:SendKeyEvent(true, Enum.KeyCode.LeftShift, false, game)
				print("[ACTION] Sprinting to generator")
				local waypoints = testPath:GetWaypoints()
				for _, wp in ipairs(waypoints) do
					if not _G.autoRun or killerNearby() then
						VIM:SendKeyEvent(false, Enum.KeyCode.LeftShift, false, game)
						return runAway()
					end
					currentCharacter.Humanoid:MoveTo(wp.Position)
					currentCharacter.Humanoid.MoveToFinished:Wait()
					print("[MOVE] Approaching generator:", wp.Position)
				end
				VIM:SendKeyEvent(false, Enum.KeyCode.LeftShift, false, game)

				local prompt = gen.Main and gen.Main:FindFirstChild("Prompt")
				if prompt then
					print("[INTERACT] Interacting with generator prompt")
					prompt.HoldDuration = 0
					prompt.RequiresLineOfSight = false
					prompt.MaxActivationDistance = 99999
					for i = 1, 10 do
						if not _G.autoRun or killerNearby() then
							prompt:InputHoldEnd()
							return runAway()
						end
						prompt:InputHoldBegin()
						wait(0.1)
						prompt:InputHoldEnd()
						gen.Remotes.RE:FireServer()
						if gen.Progress.Value >= 100 then break end
						wait(2.5)
					end
					print("[SUCCESS] Generator fully repaired.")
				end
			end
		end
	end
end

-- Main bot loop
function startBot()
	botThread = task.spawn(function()
		while _G.autoRun do
			currentCharacter = nil
			for _, surv in ipairs(workspace:WaitForChild("Players"):WaitForChild("Survivors"):GetChildren()) do
				if surv:GetAttribute("Username") == player.Name then
					currentCharacter = surv
					break
				end
			end
			if currentCharacter and currentCharacter:FindFirstChild("HumanoidRootPart") then
				if killerNearby() then
					runAway()
				else
					repairGenerators()
				end
			end
			wait(0.2)
		end
	end)
end

-- UI Toggle
AutomationTab:CreateToggle({
	Name = "Autofarm AI",
	Description = "AI POWERED: Run, repair, survive.",
	CurrentValue = false,
	Callback = function(state)
		_G.autoRun = state
		if _G.autoRun and not botThread then
			startBot()
		elseif not _G.autoRun and botThread then
			task.cancel(botThread)
			botThread = nil
			print("[SYSTEM] Bot deactivated.")
		end
	end
}, "AutoRunToggle")


-- Killer Tab with Toggles
local KillerTab = Window:CreateTab({
	Name = "Killer",
	Icon = "gavel",
	ImageSource = "Material",
	ShowTitle = true
})

AutomationTab:CreateToggle({
	Name = "Infinite Stamina",
	Description = "Disables stamina loss",
	CurrentValue = false,
	Callback = function(state)
		staminaLossEnabled = state
		if staminaLoopThread then
			task.cancel(staminaLoopThread)
			staminaLoopThread = nil
		end
		staminaLoopThread = task.spawn(function()
			while true do
				require(game.ReplicatedStorage.Systems.Character.Game.Sprinting).StaminaLossDisabled = staminaLossEnabled
				task.wait(0.1)
			end
		end)
	end
})

KillerTab:CreateSection("COMING SOON")

local simulateKnifeThrow = false
local killAuraCon = nil

KillerTab:CreateToggle({
	Name = "Simulate knife throw for killing nearest",
	Description = "More legit looking kill, less reliable",
	CurrentValue = false,
	Callback = function(state)
		simulateKnifeThrow = state
		Luna:Notification({
			Title = "Knife Throw",
			Icon = "toggle_on",
			ImageSource = "Material",
			Content = simulateKnifeThrow and "Simulated knife throw enabled." or "Simulated knife throw disabled."
		})
	end
})

KillerTab:CreateButton({
	Name = "Kill closest player as murderer",
	Callback = function()
		if findMurderer() ~= localplayer then
			fu.notification("You're not murderer.") return
		end

		if not localplayer.Character:FindFirstChild("Knife") then
			if localplayer.Backpack:FindFirstChild("Knife") then
				localplayer.Character:FindFirstChild("Humanoid"):EquipTool(localplayer.Backpack:FindFirstChild("Knife"))
			else
				fu.notification("You don't have the knife..?")
				return
			end
		end

		local NearestPlayer = findNearestPlayer()
		if not NearestPlayer or not NearestPlayer.Character then
			fu.notification("Can't find a player!?")
			return
		end

		local nearestHRP = NearestPlayer.Character:FindFirstChild("HumanoidRootPart")
		if not nearestHRP then
			fu.notification("Can't find the player's pivot.")
			return
		end

		if not localplayer.Character:FindFirstChild("HumanoidRootPart") then
			fu.notification("You're not a valid character.")
			return
		end

		if not simulateKnifeThrow then
			nearestHRP.Anchored = true
			nearestHRP.CFrame = localplayer.Character:FindFirstChild("HumanoidRootPart").CFrame + localplayer.Character:FindFirstChild("HumanoidRootPart").CFrame.LookVector * 2
			task.wait(0.1)
			localplayer.Character.Knife.Stab:FireServer("Slash")
		else
			local lpknife = localplayer.Character:FindFirstChild("Knife")
			if not lpknife then return end
			local raycastParams = RaycastParams.new()
			raycastParams.FilterType = Enum.RaycastFilterType.Exclude
			raycastParams.FilterDescendantsInstances = {localplayer.Character}
			local rayResult = workspace:Raycast(lpknife:GetPivot().Position, (nearestHRP.Position - localplayer.Character:FindFirstChild("HumanoidRootPart").Position).Unit * 350, raycastParams)
			local toThrow = nearestHRP.Position
			local args = {
				lpknife:GetPivot(),
				toThrow
			}
			localplayer.Character.Knife.Throw:FireServer(unpack(args))
		end
	end
})

KillerTab:CreateToggle({
	Name = "Murderer kill aura",
	Description = "Auto kill nearby players",
	CurrentValue = false,
	Callback = function(state)
		if killAuraCon then
			killAuraCon:Disconnect()
			killAuraCon = nil
		end
		if state then
			Luna:Notification({
				Title = "Kill Aura",
				Icon = "toggle_on",
				ImageSource = "Material",
				Content = "Kill aura enabled."
			})
			killAuraCon = game:GetService("RunService").Heartbeat:Connect(function()
				for _, player in ipairs(game.Players:GetPlayers()) do
					if player.Character and player.Character:FindFirstChild("HumanoidRootPart") and player ~= localplayer then
						local hrp = player.Character:FindFirstChild("HumanoidRootPart")
						local myHrp = localplayer.Character and localplayer.Character:FindFirstChild("HumanoidRootPart")
						if myHrp and (hrp.Position - myHrp.Position).Magnitude < 7 then
							hrp.Anchored = true
							hrp.CFrame = myHrp.CFrame + myHrp.CFrame.LookVector * 2
							task.wait(0.1)
							localplayer.Character.Knife.Stab:FireServer("Slash")
						end
					end
				end
			end)
		else
			Luna:Notification({
				Title = "Kill Aura",
				Icon = "toggle_off",
				ImageSource = "Material",
				Content = "Kill aura disabled."
			})
		end
	end
})

local ESPTab = Window:CreateTab({
	Name = "ESP",
	Icon = "visibility",
	ImageSource = "Material",
	ShowTitle = true
})

ESPTab:CreateSection("ESP Toggles")

local espPlayers = false
local espGenerators = false
local espItems = false
local espKiller = false
local espConnections = {}

local function clearESP()
	for _, v in pairs(workspace:GetDescendants()) do
		if v:IsA("Highlight") and (v.Name == "PlayerESP" or v.Name == "GeneratorESP" or v.Name == "ItemESP" or v.Name == "KillerESP") then
			v:Destroy()
		end
	end
	for _, conn in ipairs(espConnections) do
		if typeof(conn) == "RBXScriptConnection" then conn:Disconnect() end
	end
	table.clear(espConnections)
end

local function setupESP()
	clearESP()

	if espPlayers then
		for _, player in ipairs(game.Players:GetPlayers()) do
			if player ~= game.Players.LocalPlayer and player.Character then
				local highlight = Instance.new("Highlight")
				highlight.Name = "PlayerESP"
				highlight.Adornee = player.Character
				highlight.FillColor = Color3.fromRGB(0, 255, 0)
				highlight.OutlineTransparency = 1
				highlight.Parent = player.Character
			end
		end
	end

	if espGenerators and workspace:FindFirstChild("Map") then
		for _, gen in ipairs(workspace.Map:GetDescendants()) do
			if gen.Name == "Generator" then
				local highlight = Instance.new("Highlight")
				highlight.Name = "GeneratorESP"
				highlight.Adornee = gen
				highlight.FillColor = Color3.fromRGB(255, 255, 0)
				highlight.OutlineTransparency = 1
				highlight.Parent = gen
			end
		end
	end

	if espItems and workspace:FindFirstChild("Map") then
		for _, item in ipairs(workspace.Map:GetDescendants()) do
			if item:IsA("Tool") or (item:IsA("Model") and item.Name == "Medkit") then
				local highlight = Instance.new("Highlight")
				highlight.Name = "ItemESP"
				highlight.Adornee = item
				highlight.FillColor = Color3.fromRGB(0, 200, 255)
				highlight.OutlineTransparency = 1
				highlight.Parent = item
			end
		end
	end

	if espKiller and workspace:FindFirstChild("Players") and workspace.Players:FindFirstChild("Killers") then
		for _, killer in ipairs(workspace.Players.Killers:GetChildren()) do
			if killer:FindFirstChild("HumanoidRootPart") then
				local highlight = Instance.new("Highlight")
				highlight.Name = "KillerESP"
				highlight.Adornee = killer
				highlight.FillColor = Color3.fromRGB(255, 0, 0)
				highlight.OutlineColor = Color3.fromRGB(255, 0, 0)
				highlight.OutlineTransparency = 0
				highlight.FillTransparency = 0.2
				highlight.DepthMode = Enum.HighlightDepthMode.AlwaysOnTop
				highlight.Parent = killer
			end
		end
	end
end

ESPTab:CreateToggle({
	Name = "Player ESP",
	Description = "Show highlights on players",
	CurrentValue = false,
	Callback = function(state)
		espPlayers = state
		setupESP()
	end
})

ESPTab:CreateToggle({
	Name = "Generator ESP",
	Description = "Show highlights on generators",
	CurrentValue = false,
	Callback = function(state)
		espGenerators = state
		setupESP()
	end
})

ESPTab:CreateToggle({
	Name = "Item ESP",
	Description = "Show highlights on items",
	CurrentValue = false,
	Callback = function(state)
		espItems = state
		setupESP()
	end
})

ESPTab:CreateToggle({
	Name = "Killer ESP",
	Description = "Show highlight on killer",
	CurrentValue = false,
	Callback = function(state)
		espKiller = state
		setupESP()
	end
})

-- Auto refresh ESP every 5 seconds
task.spawn(function()
	while true do
		if espPlayers or espGenerators or espItems or espKiller then
			setupESP()
		end
		task.wait(5) -- Refresh interval (seconds)
	end
end)
