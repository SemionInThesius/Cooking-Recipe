
-- == Key Validation System (loads real hack after success) == --

local allowedUsers = {
    ["TestUser1"] = "TestKey123",  -- Test key 1
    ["TestUser2"] = "TestKey456",  -- Test key 2
    ["TestUser3"] = "TestKey789"   -- Test key 3
}

local loggingWebhook = "https://discord.com/api/webhooks/your_webhook_url"

local UserInputName = ""
local UserInputKey = ""

local HttpService = game:GetService("HttpService")

-- Function to log the entry attempt
local function sendLoginLog(username, key, success)
    local message = success and "**Access Granted**" or "**Access Denied**"
    local color = success and tonumber("0x00FF00") or tonumber("0xFF0000")

    local data = {
        ["embeds"] = {{
            ["title"] = "Script Access Log",
            ["description"] = message,
            ["color"] = color,
            ["fields"] = {
                {["name"] = "Entered Username", ["value"] = username, ["inline"] = true},
                {["name"] = "Entered Key", ["value"] = key, ["inline"] = true},
                {["name"] = "Player", ["value"] = game.Players.LocalPlayer.Name .. " (" .. game.Players.LocalPlayer.UserId .. ")", ["inline"] = false},
                {["name"] = "HWID or Executor", ["value"] = identifyexecutor and identifyexecutor() or "N/A", ["inline"] = false}
            },
            ["timestamp"] = os.date("!%Y-%m-%dT%H:%M:%SZ")
        }}
    }

    local body = HttpService:JSONEncode(data)
    local headers = {["Content-Type"] = "application/json"}
    local request = http_request or request or syn.request

    request({
        Url = loggingWebhook,
        Method = "POST",
        Headers = headers,
        Body = body
    })
end

-- Function to handle invalid key or username
local function disconnectWithMessage(msg)
    game:GetService("StarterGui"):SetCore("SendNotification", {
        Title = "LOOOL ðŸ¤¡",
        Text = msg,
        Duration = 3
    })
    wait(3)
    game.Players.LocalPlayer:Kick("Bro you really tried to steal someone's key huh? ðŸ’€")
end

-- Create UI for key input
local Library = loadstring(game:HttpGet("https://raw.githubusercontent.com/PSXScriptsHub/PepsiUi/main/UI"))()

local KeyWindow = Library:CreateWindow({
    Name = "Key Required",
    Themeable = {
        Info = 'Enter your key to unlock the script',
        Credit = false,
    }
})

local KeyTab = KeyWindow:CreateTab({
    Name = 'Key Validation'
})

local KeySection = KeyTab:CreateSection({
    Name = 'Enter Key',
    Side = 'Left'
})

KeySection:AddTextbox({
    Name = "Username",
    Flag = "InputUsername",
    Value = "",
    Callback = function(value)
        UserInputName = value
    end
})

KeySection:AddTextbox({
    Name = "Access Key",
    Flag = "InputKey",
    Value = "",
    Callback = function(value)
        UserInputKey = value
    end
})

KeySection:AddButton({
    Name = "Submit Key",
    Callback = function()
        local actualName = game.Players.LocalPlayer.Name
        local enteredName = UserInputName
        local enteredKey = UserInputKey

        local correctKey = allowedUsers[enteredName]
        local nameMismatch = enteredName ~= actualName

        local keyIsValid = (correctKey == enteredKey)

        sendLoginLog(enteredName, enteredKey, keyIsValid and not nameMismatch)

        if not keyIsValid then
            game:GetService("StarterGui"):SetCore("SendNotification", {
                Title = "Access Denied!";
                Text = "Invalid username or key.",
                Duration = 4
            })
            return
        end

        if nameMismatch then
            disconnectWithMessage("This key belongs to @" .. enteredName .. ", not you @" .. actualName .. ". You're caught ðŸ˜¹")
            return
        end

        KeyWindow:Destroy()
        loadHackGUIAndFeatures()
    end
})

-- Function to load the actual hack after key validation
function loadHackGUIAndFeatures()
    loadstring(game:HttpGet("https://raw.githubusercontent.com/SemionInThesius/Cooking-Recipe/refs/heads/main/Cooking%20Recipe"))()
end
